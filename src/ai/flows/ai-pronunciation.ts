// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A text-to-speech AI agent for Japanese pronunciation.
 *
 * - aiPronunciation - A function that handles the text-to-speech conversion.
 * - AiPronunciationInput - The input type for the aiPronunciation function.
 * - AiPronunciationOutput - The return type for the aiPronunciation function.
 */

import {ai} from '@/ai/genkit';
import {googleAI} from '@genkit-ai/googleai';
import {z} from 'genkit';
import wav from 'wav';

const AiPronunciationInputSchema = z.object({
  text: z.string().describe('The text to be converted to speech.'),
});
export type AiPronunciationInput = z.infer<typeof AiPronunciationInputSchema>;

const AiPronunciationOutputSchema = z.object({
  media: z.string().describe('The audio data in WAV format as a data URI.').optional(),
  error: z.string().describe('An error message if audio generation failed.').optional(),
});
export type AiPronunciationOutput = z.infer<typeof AiPronunciationOutputSchema>;

export async function aiPronunciation(input: AiPronunciationInput): Promise<AiPronunciationOutput> {
  return aiPronunciationFlow(input);
}

const aiPronunciationFlow = ai.defineFlow(
  {
    name: 'aiPronunciationFlow',
    inputSchema: AiPronunciationInputSchema,
    outputSchema: AiPronunciationOutputSchema,
  },
  async (input) => {
    try {
      const {media} = await ai.generate({
        model: googleAI.model('gemini-2.5-flash-preview-tts'),
        config: {
          responseModalities: ['AUDIO'],
          speechConfig: {
            voiceConfig: {
              prebuiltVoiceConfig: {voiceName: 'Algenib'},
            },
          },
        },
        prompt: input.text,
      });

      if (!media) {
         return { error: 'No audio data was returned from the service.' };
      }

      const audioBuffer = Buffer.from(
        media.url.substring(media.url.indexOf(',') + 1),
        'base64'
      );
      
      return {
        media: 'data:audio/wav;base64,' + (await toWav(audioBuffer)),
      };
    } catch (e: any) {
        console.error('Error in aiPronunciationFlow', e);
        return { error: e.message || 'An unexpected error occurred during audio generation.' };
    }
  }
);

async function toWav(
  pcmData: Buffer,
  channels = 1,
  rate = 24000,
  sampleWidth = 2
): Promise<string> {
  return new Promise((resolve, reject) => {
    const writer = new wav.Writer({
      channels,
      sampleRate: rate,
      bitDepth: sampleWidth * 8,
    });

    let bufs = [] as any[];
    writer.on('error', reject);
    writer.on('data', function (d) {
      bufs.push(d);
    });
    writer.on('end', function () {
      resolve(Buffer.concat(bufs).toString('base64'));
    });

    writer.write(pcmData);
    writer.end();
  });
}
